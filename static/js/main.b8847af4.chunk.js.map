{"version":3,"sources":["logo.svg","components/DebriefingLog.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["DebriefingLog","useState","showCommentColumn","setShowCommentColumn","testTimestamp","testAssessment","testActionDescription","testMissingAction","testFeedback","testColors","testAssessmentIcon","getTimestamp","id","seconds","Date","toISOString","substr","getAssessment","getAssessmentIcon","assessment","getColor","getActionDescription","description","getMissingAction","getFeedback","Button","color","onClick","Table","borderless","size","map","scope","className","class","Input","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAAe,I,yDCkJAA,EAxIO,WAAM,MAEuBC,oBAAS,GAFhC,mBAEpBC,EAFoB,KAEDC,EAFC,KAIrBC,EAAgB,CACrB,GACA,GACA,GACA,GACA,EACA,KAGKC,EAAiB,CACtB,OACA,OACA,UACA,OACA,UACA,WAGKC,EAAwB,CAC7B,yBACA,6BACA,kCACA,sBACA,KACA,iCAGKC,EAAoB,CACzB,KACA,KACA,KACA,KACA,wBACA,MAGKC,EAAe,CACpB,KACA,KACA,oCACA,KACA,8CACA,kDAGKC,EAAa,CAClB,KAAQ,eACR,QAAW,eACX,QAAW,eAGNC,EAAqB,CAC1B,KAAQ,sBACR,QAAW,iBACX,QAAW,iBAONC,EAAe,SAACC,GACrB,OC5E8BC,ED4EPT,EAAcQ,GC3E5B,IAAIE,KAAe,IAAVD,GAAgBE,cAAcC,OAAO,GAAI,GAD9B,IAACH,GD+EzBI,EAAgB,SAACL,GACtB,OAAOP,EAAeO,IAGjBM,EAAoB,SAACN,GAC1B,IAAIO,EAAaF,EAAcL,GAC/B,OAAOF,EAAmBS,IAGrBC,EAAW,SAACR,GACjB,IAAIO,EAAaF,EAAcL,GAC/B,OAAOH,EAAWU,IAGbE,EAAuB,SAACT,GAC7B,IAAIU,EAAchB,EAAsBM,GAIxC,OAHmB,MAAfU,IACHA,EAAc,WAAaC,EAAiBX,IAEtCU,GAGFC,EAAmB,SAACX,GACzB,OAAOL,EAAkBK,IAGpBY,EAAc,SAACZ,GACpB,OAAOJ,EAAaI,IAGrB,OACC,qCACC,cAACa,EAAA,EAAD,CACCC,MAAM,UACNC,QA1CyB,WAC3BxB,GAAsBD,IAuCrB,SAGGA,EAAqB,sBAAwB,wBAEhD,eAAC0B,EAAA,EAAD,CAAOC,YAAU,EAACC,KAAK,KAAvB,UACG,gCACD,+BACC,oCACA,2CACA,oDACA,0CACE5B,EAAqB,0CAAoB,QAG3C,gCACEE,EAAc2B,KAAI,SAAS3B,EAAeQ,GAC1C,OACC,mCACC,+BACC,oBAAIoB,MAAM,MAAV,SAAkBpB,IAClB,6BAAKD,EAAaC,KAClB,qBAAIqB,UAAWb,EAASR,GAAxB,UAA6B,sBAAMsB,MAAM,0BAAZ,SAAuChB,EAAkBN,KAAYS,EAAqBT,MACvH,6BAAKY,EAAYZ,KACfV,EAAqB,6BAAI,cAACiC,EAAA,EAAD,MAAuB,oBExH9CC,MATf,WACE,OACE,8BACI,cAAC,EAAD,OCGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b8847af4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useContext, useState } from 'react';\n\nimport { Button, Input, Table } from 'reactstrap';\n\n// import { ScenarioContext } from \"../contexts/ScenarioContext\";\n\nimport { formatAsMinSecs } from \"../utils\"\n\nimport classnames from \"classnames\";\n\nconst DebriefingLog = () => {\n\t// const { scenario } = useContext(ScenarioContext)\n\tconst [showCommentColumn, setShowCommentColumn] = useState(false)\n\n\tconst testTimestamp = [\n\t\t10,\n\t\t20,\n\t\t30,\n\t\t40,\n\t\t0,\n\t\t250\n\t]\n\n\tconst testAssessment = [\n\t\t\"Good\",\n\t\t\"Good\",\n\t\t\"Caution\",\n\t\t\"Good\",\n\t\t\"Problem\",\n\t\t\"Problem\"\n\t]\n\n\tconst testActionDescription = [\n\t\t\"checked pulse, pulse 0\",\n\t\t\"started chest compressions\",\n\t\t\"compressions appear inefficient\",\n\t\t\"paused compressions\",\n\t\tnull,\n\t\t\"administered defib to patient\"\n\t]\n\n\tconst testMissingAction = [\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\t\"set for v-fib at 200J\",\n\t\tnull\n\t]\n\n\tconst testFeedback = [\n\t\tnull,\n\t\tnull,\n\t\t\"Use a backboard and lower the bed\",\n\t\tnull,\n\t\t\"Don't assume the default setting is correct\",\n\t\t\"Defib took longer than 3 minutes to administer\"\n\t]\n\n\tconst testColors = {\n\t\t\"Good\": \"text-success\",\n\t\t\"Caution\": \"text-warning\",\n\t\t\"Problem\": \"text-danger\"\n\t}\n\n\tconst testAssessmentIcon = {\n\t\t\"Good\": \"sentiment_satisfied\",\n\t\t\"Caution\": \"report_problem\",\n\t\t\"Problem\": \"highlight_off\"\n\t}\n\n\tconst toggleCommentColumn = () => {\n\t\tsetShowCommentColumn(!showCommentColumn);\n\t}\n\n\tconst getTimestamp = (id) => {\n\t\treturn formatAsMinSecs(testTimestamp[id]);\n\t}\n\n\tconst getAssessment = (id) => {\n\t\treturn testAssessment[id];\n\t}\n\n\tconst getAssessmentIcon = (id) => {\n\t\tvar assessment = getAssessment(id);\n\t\treturn testAssessmentIcon[assessment];\t\t\n\t}\n\n\tconst getColor = (id) => {\n\t\tvar assessment = getAssessment(id);\n\t\treturn testColors[assessment];\n\t}\n\n\tconst getActionDescription = (id) => {\n\t\tvar description = testActionDescription[id];\n\t\tif (description == null) {\n\t\t\tdescription = \"Did not \" + getMissingAction(id);\n\t\t}\n\t\treturn description;\n\t}\n\n\tconst getMissingAction = (id) => {\n\t\treturn testMissingAction[id];\n\t}\n\n\tconst getFeedback = (id) => {\n\t\treturn testFeedback[id];\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Button\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tonClick={toggleCommentColumn}>\n\t\t\t\t{(showCommentColumn) ? \"Hide comment column\" : \"Show comment column\"}\n\t\t\t</Button>\n\t\t\t<Table borderless size=\"md\">\n\t\t\t  \t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t\t<th>Timestamp</th>\n\t\t\t\t\t\t<th>Action Description</th>\n\t\t\t\t\t\t<th>Feedback</th>\n\t\t\t\t\t\t{(showCommentColumn) ? <th>Comments</th> : \"\"}\n\t\t\t\t\t</tr>\n\t\t\t  \t</thead>\n\t\t\t  \t<tbody>\n\t\t\t  \t\t{testTimestamp.map(function(testTimestamp, id) {\n\t\t\t  \t\t\treturn (\n\t\t\t  \t\t\t\t<>\n\t\t\t  \t\t\t\t\t<tr>\n\t\t\t  \t\t\t\t\t\t<th scope=\"row\">{ id }</th>\n\t\t\t  \t\t\t\t\t\t<td>{getTimestamp(id)}</td>\n\t\t\t  \t\t\t\t\t\t<td className={getColor(id)}><span class=\"material-icons-outlined\">{getAssessmentIcon(id)}</span>{getActionDescription(id)}</td>\n\t\t\t  \t\t\t\t\t\t<td>{getFeedback(id)}</td>\n\t\t\t  \t\t\t\t\t\t{(showCommentColumn) ? <td><Input></Input></td> : \"\"}\n\t\t\t  \t\t\t\t\t</tr>\n\t\t\t  \t\t\t\t</>\n\t\t\t  \t\t\t);\n\t\t\t  \t\t})}\n\t\t\t  \t</tbody>\n\t\t\t</Table>\n\t\t</>\n\t)\n}\n\nexport default DebriefingLog;","export const formatAsMinSecs = (seconds) => {\n    return new Date(seconds * 1000).toISOString().substr(14, 5)\n}","import logo from './logo.svg';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\n\nimport DebriefingLog from \"./components/DebriefingLog\"\n\nfunction App() {\n  return (\n    <div>\n        <DebriefingLog>\n        </DebriefingLog>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}