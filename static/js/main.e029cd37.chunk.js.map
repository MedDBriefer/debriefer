{"version":3,"sources":["logo.svg","components/DebriefingLog.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["DebriefingLog","testAssessment","testActionDescription","testMissingAction","testFeedback","testColors","Table","borderless","size","map","testTimestamp","i","scope","seconds","Date","toISOString","substr","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAAe,I,oBCgGAA,EAxFO,WAGrB,IASMC,EAAiB,CACtB,OACA,OACA,UACA,OACA,UACA,WAGKC,EAAwB,CAC7B,yBACA,6BACA,kCACA,sBACA,KACA,iCAGKC,EAAoB,CACzB,KACA,KACA,KACA,KACA,wBACA,MAGKC,EAAe,CACpB,KACA,KACA,oCACA,KACA,8CACA,kDAGKC,EAAa,CAClB,KAAQ,eACR,QAAW,eACX,QAAW,eAGZ,OACC,mCACC,eAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,KAAK,KAAvB,UACG,gCACD,+BACC,oCACA,2CACA,4CACA,oDACA,gDACA,+CAGA,gCAhEiB,CACrB,GACA,GACA,GACA,GACA,EACA,KA2DoBC,KAAI,SAASC,EAAeC,GAC1C,OACC,mCACC,+BACC,oBAAIC,MAAM,MAAV,SAAkBD,IAClB,8BCjFqBE,EDiFAH,EChFrB,IAAII,KAAe,IAAVD,GAAgBE,cAAcC,OAAO,GAAI,MDiFlD,oBAAIC,UAAWZ,EAAWJ,EAAeU,IAAzC,SAA+CV,EAAeU,KAC9D,oBAAIM,UAAWZ,EAAWJ,EAAeU,IAAzC,SAA+CT,EAAsBS,KACrE,oBAAIM,UAAWZ,EAAWJ,EAAeU,IAAzC,SAA+CR,EAAkBQ,KACjE,6BAAKP,EAAaO,UCrFE,IAACE,aCcjBK,MATf,WACE,OACE,8BACI,cAAC,EAAD,OCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e029cd37.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useContext } from 'react';\n\nimport { Table } from 'reactstrap';\n\n// import { ScenarioContext } from \"../contexts/ScenarioContext\";\n\nimport { formatAsMinSecs } from \"../utils\"\n\nconst DebriefingLog = () => {\n\t// const { scenario } = useContext(ScenarioContext)\n\n\tconst testTimestamp = [\n\t\t10,\n\t\t20,\n\t\t30,\n\t\t40,\n\t\t0,\n\t\t250\n\t]\n\n\tconst testAssessment = [\n\t\t\"Good\",\n\t\t\"Good\",\n\t\t\"Caution\",\n\t\t\"Good\",\n\t\t\"Problem\",\n\t\t\"Problem\"\n\t]\n\n\tconst testActionDescription = [\n\t\t\"checked pulse, pulse 0\",\n\t\t\"started chest compressions\",\n\t\t\"compressions appear inefficient\",\n\t\t\"paused compressions\",\n\t\tnull,\n\t\t\"administered defib to patient\"\n\t]\n\n\tconst testMissingAction = [\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\tnull,\n\t\t\"Set for v-fib at 200J\",\n\t\tnull\n\t]\n\n\tconst testFeedback = [\n\t\tnull,\n\t\tnull,\n\t\t\"Use a backboard and lower the bed\",\n\t\tnull,\n\t\t\"Don't assume the default setting is correct\",\n\t\t\"Defib took longer than 3 minutes to administer\"\n\t]\n\n\tconst testColors = {\n\t\t\"Good\": \"text-success\",\n\t\t\"Caution\": \"text-warning\",\n\t\t\"Problem\": \"text-danger\"\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Table borderless size=\"md\">\n\t\t\t  \t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t\t<th>Timestamp</th>\n\t\t\t\t\t\t<th>Assessment</th>\n\t\t\t\t\t\t<th>Action Description</th>\n\t\t\t\t\t\t<th>Missing Action</th>\n\t\t\t\t\t\t<th>Feedback</th>\n\t\t\t\t\t</tr>\n\t\t\t  \t</thead>\n\t\t\t  \t<tbody>\n\t\t\t  \t\t{testTimestamp.map(function(testTimestamp, i) {\n\t\t\t  \t\t\treturn (\n\t\t\t  \t\t\t\t<>\n\t\t\t  \t\t\t\t\t<tr>\n\t\t\t  \t\t\t\t\t\t<th scope=\"row\">{ i }</th>\n\t\t\t  \t\t\t\t\t\t<td>{formatAsMinSecs(testTimestamp)}</td>\n\t\t\t  \t\t\t\t\t\t<td className={testColors[testAssessment[i]]}>{testAssessment[i]}</td>\n\t\t\t  \t\t\t\t\t\t<td className={testColors[testAssessment[i]]}>{testActionDescription[i]}</td>\n\t\t\t  \t\t\t\t\t\t<td className={testColors[testAssessment[i]]}>{testMissingAction[i]}</td>\n\t\t\t  \t\t\t\t\t\t<td>{testFeedback[i]}</td>\n\t\t\t  \t\t\t\t\t</tr>\n\t\t\t  \t\t\t\t</>\n\t\t\t  \t\t\t);\n\t\t\t  \t\t})}\n\t\t\t  \t</tbody>\n\t\t\t</Table>\n\t\t</>\n\t)\n}\n\nexport default DebriefingLog;","export const formatAsMinSecs = (seconds) => {\n    return new Date(seconds * 1000).toISOString().substr(14, 5)\n}","import logo from './logo.svg';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport DebriefingLog from \"./components/DebriefingLog\"\n\nfunction App() {\n  return (\n    <div>\n        <DebriefingLog>\n        </DebriefingLog>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}